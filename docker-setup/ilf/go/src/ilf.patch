diff --git a/execution/backend.go b/execution/backend.go
index 23e7944..ef84e22 100644
--- a/execution/backend.go
+++ b/execution/backend.go
@@ -272,6 +272,7 @@ type Tx struct {
 	Timestamp   *big.Int       `json:"timestamp"`
 	Snapshot    bool           `json:"snapshot"`
 	Policy      string         `json:"policy"`
+	Number      *big.Int       `json:"number"`
 }
 
 func (backend *Backend) CommitTransaction(
@@ -410,6 +411,7 @@ func (backend *Backend) CommitTx(tx *Tx) *FuzzLogger {
 	if tx.Snapshot {
 		backend.Snapshots[tx.ID] = backend.StateDB.Copy()
 	}
+	tx.Number = header.Number
 
 	fuzzLogger := &FuzzLogger{
 		Tx:                   tx,
diff --git a/ilf/execution/execution.py b/ilf/execution/execution.py
index f2558f7..68cb8cd 100644
--- a/ilf/execution/execution.py
+++ b/ilf/execution/execution.py
@@ -74,4 +74,4 @@ class Execution:
             'amount': str(amount),
         }
         params = json.dumps(params).encode('ascii')
-        self.lib.SetBalance(params)
\ No newline at end of file
+        self.lib.SetBalance(params)
diff --git a/ilf/execution/logger.py b/ilf/execution/logger.py
index 41e0bdd..4253771 100644
--- a/ilf/execution/logger.py
+++ b/ilf/execution/logger.py
@@ -370,4 +370,4 @@ class Logger:
         elif op == SELFDESTRUCT:
             return self.trace_log_stack(log_idx-1, stack_pos+STACK_CHANGES[op])
         else:
-            assert False, 'unsuppored opcode {}'.format(op)
\ No newline at end of file
+            assert False, 'unsuppored opcode {}'.format(op)
diff --git a/ilf/execution/tx.py b/ilf/execution/tx.py
index a7b9984..f495802 100644
--- a/ilf/execution/tx.py
+++ b/ilf/execution/tx.py
@@ -24,7 +24,7 @@ class Tx:
 
     IDGEN = IDGenerator()
 
-    def __init__(self, policy, contract, call_address, method, input_bytes, arguments, amount, sender, timestamp, snapshot, idd=None):
+    def __init__(self, policy, contract, call_address, method, input_bytes, arguments, amount, sender, timestamp, number, snapshot, idd=None):
         self.idd = Tx.IDGEN.gen(contract) if idd is None else idd
 
         if policy.__class__ == str:
@@ -40,6 +40,7 @@ class Tx:
         self.amount = amount
         self.sender = sender
         self.timestamp = timestamp
+        self.number = number
 
         self.snapshot = snapshot
 
@@ -71,6 +72,17 @@ class Tx:
     def to_execution_str(self):
         return json.dumps(self.to_execution_dict())
 
+    def dump(self):
+        j = OrderedDict()
+        j['contract'] = self.contract
+        j['call_address'] = self.call_address
+        j['method'] = self.method
+        j['arguments'] = self.arguments
+        j['amount'] = self.amount
+        j['sender'] = self.sender
+        j['timestamp'] = self.timestamp
+        j['number'] = 1 if self.number is None else self.number
+        return j
 
     def to_json(self):
         j = OrderedDict()
@@ -84,4 +96,4 @@ class Tx:
         j['timestamp'] = self.timestamp
         j['snapshot'] = self.snapshot
         j['policy'] = self.policy,
-        return j
\ No newline at end of file
+        return j
diff --git a/ilf/fuzzers/checkers/block_state_dep.py b/ilf/fuzzers/checkers/block_state_dep.py
index e02cef2..985de32 100644
--- a/ilf/fuzzers/checkers/block_state_dep.py
+++ b/ilf/fuzzers/checkers/block_state_dep.py
@@ -1,19 +1,25 @@
 from .checker import Checker
 from ...ethereum import *
+import time
 
 
 class BlockStateDep(Checker):
 
-    def __init__(self):
+    def __init__(self, start_time):
         super().__init__()
+        self.start_time = start_time
+        self.bds = set()
+        self.tds = set()
 
 
     def check(self, logger):
         block_state_op_idx = -1
+        block_state_op = None
 
         for i, log in enumerate(logger.logs):
             if log.op in (COINBASE, TIMESTAMP, NUMBER, DIFFICULTY, GASLIMIT):
                 block_state_op_idx = i
+                block_state_op = log.op
                 break
 
         if block_state_op_idx == -1:
@@ -44,6 +50,16 @@ class BlockStateDep(Checker):
                 try:
                     _, value_from_block = logger.trace_log_stack(i-1, -1)
                     if value_from_block:
+                        if block_state_op == TIMESTAMP:
+                            if log.pc not in self.tds:
+                                elapsed = time.time() - self.start_time
+                                self.dump_bug(elapsed, 'BlockstateDependency', 0, logger.tx.method)
+                                self.tds.add(log.pc)
+                        else:
+                            if log.pc not in self.bds:
+                                elapsed = time.time() - self.start_time
+                                self.dump_bug(elapsed, 'BlockstateDependency', 0, logger.tx.method)
+                                self.bds.add(log.pc)
                         return True
                 except RecursionError:
                     pass
@@ -55,6 +71,16 @@ class BlockStateDep(Checker):
                 try:
                     _, value_from_block = logger.trace_log_stack(i-1, -3)
                     if value_from_block:
+                        if block_state_op == TIMESTAMP:
+                            if log.pc not in self.tds:
+                                elapsed = time.time() - self.start_time
+                                self.dump_bug(elapsed, 'BlockstateDependency', 0, logger.tx.method)
+                                self.tds.add(log.pc)
+                        else:
+                            if log.pc not in self.bds:
+                                elapsed = time.time() - self.start_time
+                                self.dump_bug(elapsed, 'BlockstateDependency', 0, logger.tx.method)
+                                self.bds.add(log.pc)
                         return True
                 except RecursionError:
                     continue
@@ -62,8 +88,18 @@ class BlockStateDep(Checker):
                 try:
                     _, value_from_block = logger.trace_log_stack(i-1, -2)
                     if value_from_block:
+                        if block_state_op == TIMESTAMP:
+                            if log.pc not in self.tds:
+                                elapsed = time.time() - self.start_time
+                                self.dump_bug(elapsed, 'BlockstateDependency', 0, logger.tx.method)
+                                self.tds.add(log.pc)
+                        else:
+                            if log.pc not in self.bds:
+                                elapsed = time.time() - self.start_time
+                                self.dump_bug(elapsed, 'BlockstateDependency', 0, logger.tx.method)
+                                self.bds.add(log.pc)
                         return True
                 except RecursionError:
                     continue
 
-        return False
\ No newline at end of file
+        return False
diff --git a/ilf/fuzzers/checkers/checker.py b/ilf/fuzzers/checkers/checker.py
index 69f0969..1f014de 100644
--- a/ilf/fuzzers/checkers/checker.py
+++ b/ilf/fuzzers/checkers/checker.py
@@ -9,4 +9,17 @@ class Checker:
 
     @abc.abstractmethod
     def check(self, logger):
-        raise NotImplementedError
\ No newline at end of file
+        raise NotImplementedError
+
+    def dump_bug(self, elapsed, sig, pc, method):
+        s = int(elapsed)
+        d = s // 86400
+        s = s - (d * 86400)
+        h = s // 3600
+        s = s - (h * 3600)
+        m = s // 60
+        s = s - (m * 60)
+        time_str = '%02d:%02d:%02d:%02d' % (d, h, m, s)
+        msg = '[%s] Found %s at %x from %s\n'
+        with open('/home/test/ilf-workspace/output/log.txt', 'a+') as f:
+            f.write(msg % (time_str, sig, pc, method))
diff --git a/ilf/fuzzers/checkers/reentrancy.py b/ilf/fuzzers/checkers/reentrancy.py
index 0f3d1f8..3664433 100644
--- a/ilf/fuzzers/checkers/reentrancy.py
+++ b/ilf/fuzzers/checkers/reentrancy.py
@@ -1,13 +1,16 @@
 from .checker import Checker
 from ...ethereum import *
+import time
 
 
 class Reentrancy(Checker):
 
-    def __init__(self, contract_manager, account_manager):
+    def __init__(self, contract_manager, account_manager, start_time):
         super().__init__()
         self.contract_manager = contract_manager
         self.account_manager = account_manager
+        self.start_time = start_time
+        self.res = set()
 
     def check(self, logger):
         has_transfer = False
@@ -24,4 +27,10 @@ class Reentrancy(Checker):
         
         pc_follow = ((pc1 != -1) and (pc2 != -1) and (pc1 < pc2))
 
-        return has_transfer and change_state and pc_follow
+        cond = has_transfer and change_state and pc_follow
+        if cond:
+            if pc1 not in self.res:
+                elapsed = time.time() - self.start_time
+                self.dump_bug(elapsed, 'Reentrancy', 0, logger.tx.method)
+                self.res.add(pc1)
+        return cond
diff --git a/ilf/fuzzers/checkers/unhandled_exception.py b/ilf/fuzzers/checkers/unhandled_exception.py
index 72e9579..b86a33a 100644
--- a/ilf/fuzzers/checkers/unhandled_exception.py
+++ b/ilf/fuzzers/checkers/unhandled_exception.py
@@ -1,21 +1,30 @@
 from .checker import Checker
 from ...ethereum import REVERT, INVALID
+import time
 
 
 class UnhandledException(Checker):
 
-    def __init__(self):
+    def __init__(self, start_time):
         super().__init__()
+        self.start_time = start_time
+        self.mes = set()
 
 
     def check(self, logger):
         has_exception = False
 
+        except_pc = None
         for _, log in enumerate(logger.logs):
             if (log.op in (REVERT, INVALID) or log.error != '') and log.depth > 1:
+                except_pc = log.pc
                 has_exception = True
 
         if has_exception and logger.logs[-1].op not in (REVERT, INVALID) and logger.logs[-1].error == '':
+            if except_pc not in self.mes:
+                elapsed = time.time() - self.start_time
+                self.dump_bug(elapsed, 'MishandledException', 0, logger.tx.method)
+                self.mes.add(except_pc)
             return True
         else:
-            return False
\ No newline at end of file
+            return False
diff --git a/ilf/fuzzers/environment.py b/ilf/fuzzers/environment.py
index 521e524..0859165 100644
--- a/ilf/fuzzers/environment.py
+++ b/ilf/fuzzers/environment.py
@@ -2,6 +2,7 @@ import random
 import numpy
 import torch
 import logging
+import time
 
 from ..execution import Execution, Tx
 from ..ethereum import Method
@@ -11,6 +12,8 @@ from .sym_plus import PolicySymPlus
 from .mix import PolicyMix, ObsMix
 from .imitation import PolicyImitation
 
+import json
+
 
 LOG = logging.getLogger(__name__)
 
@@ -20,7 +23,21 @@ class Environment:
     def __init__(self, limit, seed):
         self.limit = limit
         self.seed = seed
-
+        self.txs = []
+        self.cov_increased = False
+        self.start_time = time.time()
+
+    def dump_txs(self):
+        now = time.time()
+        with open('/home/test/ilf-workspace/output/tc_%0.5f' % (now - self.start_time), 'w') as f:
+            for tx in self.txs:
+                f.write(json.dumps(tx.dump()) + '\n')
+
+    def reset_txs(self):
+        if self.cov_increased:
+            self.dump_txs()
+        self.txs = []
+        self.cov_increased = False
 
     def fuzz_loop(self, policy, obs):
         obs.init()
@@ -34,7 +51,9 @@ class Environment:
         torch.manual_seed(self.seed)
         numpy.random.seed(self.seed)
 
-        for i in range(1, self.limit+1):
+        i = -1
+        while True:
+            i += 1
             if policy.__class__ in (PolicyRandom, PolicyImitation) and i > self.limit // 2:
                 for contract_name in policy.contract_manager.fuzz_contract_names:
                     contract = policy.contract_manager[contract_name]
@@ -44,6 +63,7 @@ class Environment:
             if tx is None:
                 break
 
+            self.txs.append(tx)
             logger = policy.execution.commit_tx(tx)
             old_insn_coverage = obs.stat.get_insn_coverage(tx.contract)
             obs.update(logger, False)
@@ -52,10 +72,14 @@ class Environment:
             if policy.__class__ in (PolicySymbolic, PolicySymPlus) and new_insn_coverage - old_insn_coverage < 1e-5:
                 break
 
+            if new_insn_coverage - old_insn_coverage > 0:
+                self.cov_increased = True
+
             LOG.info(obs.stat)
 
             if policy.__class__ not in (PolicySymbolic, PolicySymPlus) and i % 50 == 0:
                 policy.reset()
+                self.reset_txs()
                 if policy.__class__ == PolicyImitation:
                     policy.clear_history()
                 if policy.__class__ == PolicyMix and policy.policy_fuzz.__class__ == PolicyImitation:
@@ -70,7 +94,7 @@ class Environment:
         for name in policy.contract_manager.fuzz_contract_names:
             contract = policy.contract_manager[name]
             if Method.FALLBACK not in contract.abi.methods_by_name:
-                tx = Tx(policy_random, contract.name, contract.addresses[0], Method.FALLBACK, bytes(), [], 0, 0, 0, True)
+                tx = Tx(policy_random, contract.name, contract.addresses[0], Method.FALLBACK, bytes(), [], 0, 0, 0, None, True)
                 logger = policy_random.execution.commit_tx(tx)
                 obs.update(logger, True)
                 LOG.info(obs.stat)
@@ -81,4 +105,4 @@ class Environment:
                     tx.amount = 1
                     logger = policy_random.execution.commit_tx(tx)
                     obs.update(logger, True)
-                    LOG.info(obs.stat)
\ No newline at end of file
+                    LOG.info(obs.stat)
diff --git a/ilf/fuzzers/imitation/policy_imitation.py b/ilf/fuzzers/imitation/policy_imitation.py
index 7180f10..9dce316 100644
--- a/ilf/fuzzers/imitation/policy_imitation.py
+++ b/ilf/fuzzers/imitation/policy_imitation.py
@@ -505,7 +505,7 @@ class PolicyImitation(PolicyBase):
 
         self.last_method[contract.name] = pred_f
 
-        tx = Tx(self, contract.name, address, method.name, bytes(), arguments, amount, sender, timestamp, True)
+        tx = Tx(self, contract.name, address, method.name, bytes(), arguments, amount, sender, timestamp, None, True)
         return tx
 
     def _select_contract(self):
diff --git a/ilf/fuzzers/obs_base.py b/ilf/fuzzers/obs_base.py
index 838c327..3474de5 100644
--- a/ilf/fuzzers/obs_base.py
+++ b/ilf/fuzzers/obs_base.py
@@ -68,4 +68,4 @@ class ObsBase:
             for log in logger.logs:
                 bow[log.op] += 1
 
-        return select_interesting_ops(bow)
\ No newline at end of file
+        return select_interesting_ops(bow)
diff --git a/ilf/fuzzers/random/policy_random.py b/ilf/fuzzers/random/policy_random.py
index 7a157a0..d27cd72 100644
--- a/ilf/fuzzers/random/policy_random.py
+++ b/ilf/fuzzers/random/policy_random.py
@@ -19,7 +19,7 @@ class PolicyRandom(PolicyBase):
         amount = self._select_amount(contract, method, sender, obs)
         timestamp = self._select_timestamp(obs)
 
-        tx = Tx(self, contract.name, address, method.name, bytes(), arguments, amount, sender, timestamp, True)
+        tx = Tx(self, contract.name, address, method.name, bytes(), arguments, amount, sender, timestamp, None, True)
         return tx
 
 
@@ -32,7 +32,7 @@ class PolicyRandom(PolicyBase):
         amount = self._select_amount(contract, method, sender, obs)
         timestamp = self._select_timestamp(obs)
 
-        tx = Tx(self, contract.name, address, method.name, bytes(), arguments, amount, sender, timestamp, True)
+        tx = Tx(self, contract.name, address, method.name, bytes(), arguments, amount, sender, timestamp, None, True)
         return tx
 
 
@@ -159,4 +159,4 @@ class PolicyRandom(PolicyBase):
 
     def _select_bytes(self, obs):
         size = random.randint(1, 15)
-        return self._select_fixed_bytes(size, obs)
\ No newline at end of file
+        return self._select_fixed_bytes(size, obs)
diff --git a/ilf/fuzzers/stat.py b/ilf/fuzzers/stat.py
index 5e86296..0047ca7 100644
--- a/ilf/fuzzers/stat.py
+++ b/ilf/fuzzers/stat.py
@@ -1,4 +1,5 @@
 import json
+import time
 
 from collections import OrderedDict
 from .checkers import *
@@ -32,14 +33,16 @@ class Stat:
         for name in contract_manager.contract_dict:
             self.bug_res[name] = dict()
 
+        start_time = time.time()
+
         self.checkers = [
-            BlockStateDep(),
+            BlockStateDep(start_time),
             DangerousDelegatecall(contract_manager, account_manager),
             Leaking(),
             Locking(contract_manager, account_manager),
             Suicidal(contract_manager, account_manager),
-            UnhandledException(),
-            Reentrancy(contract_manager, account_manager)
+            UnhandledException(start_time),
+            Reentrancy(contract_manager, account_manager, start_time)
         ]
 
 
diff --git a/script/extract.py b/script/extract.py
index d48b9ce..fbe0738 100644
--- a/script/extract.py
+++ b/script/extract.py
@@ -40,11 +40,7 @@ def modify_truffle_js():
          '  },\n'
          '  compilers: {\n'
          '     solc: {\n'
-         '       version: "native",\n'
-         '       optimizer: {\n'
-         '         enabled: true,\n'
-         '         runs: 200\n'
-         '       }\n'
+         '       version: "native"\n'
          '     }\n'
          '  }\n'
          '};')
@@ -81,4 +77,4 @@ def main():
 
 
 if __name__ == '__main__':
-    main()
\ No newline at end of file
+    main()
